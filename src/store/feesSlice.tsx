import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState } from "./store";

const initialState: FeesState = {
  fees: [
    {
      studentCount: 25,
      course: ["Course1", "Course2"],
      registerFee: 10000,
      amount: 25000,
      installment: 4,
      frequency: "Quaterly",
      feeStructureName: "Structure 1"
    },
    {
      studentCount: 50,
      course: ["Course1", "Course3"],
      registerFee: 20000,
      amount: 30000,
      installment: 12,
      frequency: "Monthly",
      feeStructureName: "Structure 2"
    }
  ]
};

export const feesSlice = createSlice({
  name: "val",
  initialState: initialState as FeesState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addFees: (state, action: PayloadAction<IFees>) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.fees.push(action.payload);
    }
    // decrement: (state) => {
    //   state.value -= 1;
    // },
    // // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action) => {
    //   state.value += action.payload;
    // }
  }
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  //   extraReducers: (builder) => {
  //     builder
  //       .addCase(incrementAsync.pending, (state) => {
  //         state.status = "loading";
  //       })
  //       .addCase(incrementAsync.fulfilled, (state, action) => {
  //         state.status = "idle";
  //         state.value += action.payload;
  //       });
  //   }
});

export const { addFees } = feesSlice.actions;

export const selectFees = (state: RootState) => state.fees.fees;

export default feesSlice.reducer;
